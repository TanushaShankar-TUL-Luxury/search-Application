name: LHCI-output-webhook
'on':
  - push
jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Audit URLs using Lighthouse
        id: LHCIAction
        uses: treosh/lighthouse-ci-action@v3
        with:
          urls: |
            https://www.tatacliq.com
          uploadArtifacts: true
          temporaryPublicStorage: true
      - name: Generate URLs
        id: htmlPath
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          script: |
            const htmlPath = JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].htmlPath;
            const performance = JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].summary['performance'] * 100;
            const accessibility = JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].summary['accessibility'] * 100;
            const bestPractices = JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].summary['best-practices'] * 100;
            const seo = JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].summary['seo'] * 100;
            const pwa = JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].summary['pwa'] * 100;
            const links = JSON.parse('${{steps.LHCIAction.outputs.links}}')['https://www.tatacliq.com/'];
            console.log('resultsPath','${{steps.LHCIAction.outputs.resultsPath}}');
            console.log('links','${{steps.LHCIAction.outputs.links}}');
            console.log('assertionResults','${{steps.LHCIAction.outputs.assertionResults}}');
            console.log('manifest','${{steps.LHCIAction.outputs.manifest}}');
            const bodyData = {
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "type": "AdaptiveCard",
                "version": "1.0",
                "body": [
                  {
                    "type": "Container",
                    "items": [
                      {
                        "type": "TextBlock",
                        "text": "Publish Adaptive Card schema",
                        "weight": "bolder",
                        "size": "medium"
                      },
                      {
                        "type": "ColumnSet",
                        "columns": [
                          {
                            "type": "Column",
                            "width": "auto",
                            "items": [
                              {
                                "type": "Image",
                                "url": "https://pbs.twimg.com/profile_images/3647943215/d7f12830b3c17a5a9e4afcc370e3a37e_400x400.jpeg",
                                "size": "small",
                                "style": "person"
                              }
                            ]
                          },
                          {
                            "type": "Column",
                            "width": "stretch",
                            "items": [
                              {
                                "type": "TextBlock",
                                "text": "Matt Hidinger",
                                "weight": "bolder",
                                "wrap": true
                              },
                              {
                                "type": "TextBlock",
                                "spacing": "none",
                                "text": "Created {{DATE(2017-02-14T06:08:39Z, SHORT)}}",
                                "isSubtle": true,
                                "wrap": true
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "Container",
                    "items": [
                      {
                        "type": "TextBlock",
                        "text": "Now that we have defined the main rules and features of the format, we need to produce a schema and publish it to GitHub. The schema will be the starting point of our reference documentation.",
                        "wrap": true
                      },
                      {
                        "type": "FactSet",
                        "facts": [
                          {
                            "title": "Board:",
                            "value": "Adaptive Card"
                          },
                          {
                            "title": "List:",
                            "value": "Backlog"
                          },
                          {
                            "title": "Assigned to:",
                            "value": "Matt Hidinger"
                          },
                          {
                            "title": "Due date:",
                            "value": "Not set"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "actions": [
                  {
                    "type": "Action.ShowCard",
                    "title": "Set due date",
                    "card": {
                      "type": "AdaptiveCard",
                      "body": [
                        {
                          "type": "Input.Date",
                          "id": "dueDate"
                        }
                      ],
                      "actions": [
                        {
                          "type": "Action.Submit",
                          "title": "OK"
                        }
                      ]
                    }
                  },
                  {
                    "type": "Action.ShowCard",
                    "title": "Comment",
                    "card": {
                      "type": "AdaptiveCard",
                      "body": [
                        {
                          "type": "Input.Text",
                          "id": "comment",
                          "isMultiline": true,
                          "placeholder": "Enter your comment"
                        }
                      ],
                      "actions": [
                        {
                          "type": "Action.Submit",
                          "title": "OK"
                        }
                      ]
                    }
                  }
                ]
              }  
            }
            function sendRequest(data) {
              fetch('${{secrets.WEB_VITALS_HOOK}}', {
                method: "POST",
                headers: {'Content-Type': 'application/json'}, 
                body: JSON.stringify(data)
              }).then(res => {
                console.log("Request complete! response:", res);
              });
            }
            sendRequest(bodyData);
            console.log(bodyData);
          # const htmlPath = JSON.stringify(JSON.parse('${{steps.LHCIAction.outputs.manifest}}')[0].htmlPath);
          # core.setOutput('htmlPath', htmlPath);
      # - name: Deploy Stage
      #   uses: fjogeleit/http-request-action@v1
      #   with:
      #     url: '${{secrets.WEB_VITALS_HOOK}}'
      #     method: POST
      #     customHeaders: '{"Content-Type": "application/json"}'
      #     data: |
      #         {
      #           "type":"message",
      #           "attachments":[
      #               {
      #                 "contentType":"application/vnd.microsoft.card.adaptive",
      #                 "contentUrl":null,
      #                 "content":{
      #                     "$schema":"http://adaptivecards.io/schemas/adaptive-card.json",
      #                     "type":"AdaptiveCard",
      #                     "version":"1.2",
      #                     "body":[
      #                         {
      #                         "type": "TextBlock",
      #                         "text": 'Lighthouse Report ${{steps.htmlPath.outputs.htmlPath}}'
      #                         }
      #                     ]
      #                 }
      #               }
      #           ]
      #         }